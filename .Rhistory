httpuv::runStaticServer("site")
install.packages("shinylive")
shinylive::assets_info()
library(pak)
pak("posit-dev/r-shinylive")
shinylive::assets_info()
shinylive::export(".","site")
httpuv::runServer("site")
httpuv::runStaticServer("site")
shinylive::export(".","site")
httpuv::runStaticServer("site")
httpuv::runStaticServer("site")
httpuv::runStaticServer("site")
httpuv::runStaticServer("site")
httpuv::runStaticServer("site")
httpuv::runStaticServer("site")
stopAllServers()
httpuv::stopAllServers()
httpuv::runStaticServer("site")
shinylive::export(".","site")
httpuv::runStaticServer("site",port=4465)
.libPaths()
stopAllServers()
httpuv::stopAllServers()
httpuv::stopAllServers()
httpuv::stopAllServers()
shinylive::export(".","site")
httpuv::runStaticServer("site",port=5687)
install.packages("usethis")
usethis::use_github_action(url="https://github.com/rariariari/urapsummer2024.git")
usethis::use_github_action(url="https://github.com/posit-dev/r-shinylive/blob/actions-v1/examples/deploy-app.yaml")
shinylive::export(".","site")
shinylive::export(".","
site")
shinylive::export(".",site")
a
shinylive::export(".","site")
shinylive::export(".","site")
httpuv::runStaticServer("site",port=3365)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
full_level_dataALL <- fread("schoolnetworkdata/full_level_dataALL.csv")
library(magrittr)
library(dplyr)
library(sf)
library(data.table)
library(leaflet)
library(htmlwidgets)
library(cowplot)
library(shiny)
full_level_dataALL <- fread("schoolnetworkdata/full_level_dataALL.csv")
full_level_dataBACH <- fread("schoolnetworkdata/full_level_dataBACH.csv")
full_level_dataALL1 <- full_level_dataALL[1:100000,]
full_level_dataALL1 <- full_level_dataALL[100000:,]
full_level_dataALL1 <- full_level_dataALL[100000:1478563,]
full_level_dataALL2 <- full_level_dataALL[100000:1478563,]
full_level_dataALL1 <- full_level_dataALL[1:100000,]
full_level_dataALL2 <- full_level_dataALL[1000000:1478563,]
full_level_dataALL1 <- full_level_dataALL[1:1000000,]
full_level_dataBACH1 <- full_level_dataBACH[1:500000,]
full_level_dataBACH1 <- full_level_dataBACH[500000:992732,]
write.csv(full_level_dataALL1,"full_level_dataALL1")
write.csv(full_level_dataALL2,"full_level_dataALL2")
write.csv(full_level_dataBACH1,"full_level_dataBACH1")
full_level_dataALL1 <- full_level_dataALL[1:700000,]
write.csv(full_level_dataALL1,"full_level_dataALL1.csv")
full_level_dataALL2 <- full_level_dataALL[700000:1478563,]
write.csv(full_level_dataALL2,"full_level_dataALL2.csv")
write.csv(full_level_dataBACH1,"full_level_dataBACH1.csv")
write.csv(full_level_dataBACH2,"full_level_dataBACH2")
full_level_dataBACH <- fread("schoolnetworkdata/full_level_dataBACH.csv")
full_level_dataBACH1 <- full_level_dataBACH[1:500000,]
full_level_dataBACH2 <- full_level_dataBACH[500000:992732,]
write.csv(full_level_dataBACH2,"full_level_dataBACH2.csv")
full_level_dataALL1 <- full_level_dataALL[1:750000,]
write.csv(full_level_dataALL1,"full_level_dataALL1.csv")
full_level_dataALL2 <- full_level_dataALL[750000:1478563,]
full_level_dataALL1 <- full_level_dataALL[1:600000,]
full_level_dataALL2 <- full_level_dataALL[600000:1000000,]
full_level_dataALL3 <- full_level_dataALL[1000000:1478563,]
write.csv(full_level_dataALL1,"full_level_dataALL1.csv")
write.csv(full_level_dataALL2,"full_level_dataALL2.csv")
write.csv(full_level_dataALL3,"full_level_dataALL3.csv")
runApp()
View(full_level_dataALL1)
View(full_level_dataALL)
runApp()
runApp()
usethis::use_github_action(url="https://github.com/posit-dev/r-shinylive/blob/actions-v1/examples/deploy-app.yaml")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_sf
runApp()
meow <- cbsa_geomsHighres %>% st_simplify(preserveTopology = TRUE,dTolerance=0.1)
meow %>% ggplot() %>% geom_sf()
mggplot() %>% geom_sf(data=meow)
meow %>% ggplot() + geom_sf()
leaflet() %>% addTiles() %>% addPolygons(meow)
leaflet() %>% addTiles() %>% addPolygons(data=meow)
st_write(meow,"attempt.geojson")
runApp()
runApp()
runApp()
shinylive::export(".","site")
library(shinylive)
library(shiny)
httpuv::runStaticServer("site")
runApp()
?shiny-options
httpuv::runStaticServer("site")
shiny::runApp()
library(cowplot)
?ggdraw
?draw_plot
runApp()
shiny::runApp()
?rescale
?checkboxInput''
?checkboxInput
UseMethod("rescale")
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(haven)
shiny::runApp()
runApp()
library(haven)
?quo_is_null
shiny::runApp()
?as_grob
?magrittr
cbsa_geomsHighres <- st_read("usashapefiles/cbsa/cbsa_geomsHighres.geojson")
statesHighres <- st_read("usashapefiles/states/statesHighres.geojson")
cbsa_geomsHighres <- cbsa_geomsHighres %>%
st_simplify(preserveTopology = T,dTolerance = 0.5)
st_write(cbsa_geomsHighres,"cbsa_geomsHighres.geojson")
cbsa_geomsHighres <- st_read("usashapefiles/cbsa/cbsa_geomsHighres.geojson")
cbsa_geomsHighres <- cbsa_geomsHighres %>%
st_simplify(preserveTopology = T,dTolerance = 1)
cbsa_geomsHighres <- st_read("usashapefiles/cbsa/cbsa_geomsHighres.geojson")
cbsa_geomsHighres <- cbsa_geomsHighres %>%
st_simplify(preserveTopology = T,dTolerance = 1)
st_write(cbsa_geomsHighres,"cbsa_geomsHighres.geojson")
meow <- st_read("cbsa_geomsHighres.geojson")
leaflet() %>% addTiles() %>% addPolygons(data=meow)
leaflet() %>% addTiles() %>% addPolygons(data=meow) %>% addPolygons(data=states)
leaflet() %>% addTiles() %>% addPolygons(data=meow) %>% addPolygons(data=statesHighres)
runApp()
system(paste("du -sh", system.file(package="dplyr"), "| awk '{print $1}'"), intern=TRUE)
res <- read.table(pipe("du -d 1 /usr/local/lib/R/site-library/"), col.names=c("size", "name"))
head(res)
rm(res)
library(pryr)
install.packages("pryr")
library(pryr)
mem_used()
library(magrittr)
mem_used()
library(dplyr)
mem_used()
library(sf)
mem_used()
library(data.table)
mem_used()
library(leaflet)
mem_used()
library(cowplot)
mem_used()
library(ggplot2)
mem_used()
library(shiny)
mem_used()
runApp()
mem_used()
library(haven)
mem_used()
library(plyr)
mem_used()
library(pryr)
mem_used()
library(haven)
mem_used()
shiny::runApp()
library(scales)
runApp()
runApp()
runApp()
shiny::runApp()
?ggdraw
?draw_plot
runApp()
shinylive::export(".","site")
install.packages("available.packages")
library(available.packages)
available.packages()
available.packages()["ggplot2","Depends"]
available.packages()["magrittr","Depends"]
available.packages()["dplyr","Depends"]
available.packages()["data.table","Depends"]
available.packages()["leaflet","Depends"]
pack <- available.packages()
pack["ggplot2","Depends"]
dependencies()
renv::dependencies()
renv::dependencies(cowplot)
renv::dependencies("cowplot")
renv::dependencies()
renv::dependencies()
shiny::runApp()
runApp()
runApp()
?checkboxInput
runApp()
runApp()
runApp()
runApp()
?draw_plot
runApp()
runApp()
runApp()
?saveRDS
cbsa_geoms <- st_read("usashapefiles/cbsa/cbsa_geoms.geojson")
states <- st_read("usashapefiles/states/states.geojson")
cbsa_geomsHighres <- st_read("usashapefiles/cbsa/cbsa_geomsHighres.geojson")
statesHighres <- st_read("usashapefiles/states/statesHighres.geojson")
saveRDS(cbsa_geoms,"cbsa_geoms.rsd")
meow <- readRDS("cbsa_geoms.rsd")
rm(meow)
saveRDS(cbsa_geomsHighres,"cbsa_geomsHighres.rsd")
meow <- readRDS("cbsa_geomsHighres.rsd")
rm(meow)
saveRDS(states,"states.rsd")
saveRDS(statesHighres,"statesHighres.rsd")
runApp()
runApp()
runApp()
shiny::runApp()
?sf::st_as_sf
runApp()
runApp()
traceback()
runApp()
getAnywhere("st_as_sf.xts")
library(sf)
getAnywhere("st_as_sf.xts")
getAnywhere("st_as_sf.*")
getAnywhere("st_as_sf")
getAnywhere("st_as_sf")[1]
sf:::st_as_sf()
sf:::st_as_sf
.libPaths()
sf:::st_as_sf.default
sf:::st_as_sf.default
methods(st_as_sf)
?methods
sf:::st_as_sf.data.frame
shiny::runApp()
?st_sf
library(sf)
?st_sf
detach("package:sf", unload = TRUE)
runApp()
runApp()
methods(rescale)
scales::rescale.numeric
scales:::rescale.numeric
detach("package:scales", unload = TRUE)
runApp()
install.packages("profvis")
library(profvis)
shinylive::export(".","site")
library(haven)
meow <- read_dta(ltdb_std_all_2010_adjusted)
meow <- read_dta("ltdb_std_all_2010_adjusted.dta")
View(meow)
meow2 <- read_dta("clean_combined.dta")
View(meow2)
meow3 <- read_dta("blk_attr_over18_dec10.dta")
View(meow3)
meowest <- duplicated(meow3) | duplicated(meow3, fromLast = TRUE)
gc()
meow3[,-1]
meow3[1,]
meow3[,1]
View(meow3)
meow3 <-meow3[,-1]
meow3 %>% mutate(dupes = duplicated(meow3) | duplicated(meow3, fromLast = TRUE) )
library(magrittr)
meow3 %>% mutate(dupes = duplicated(meow3) | duplicated(meow3, fromLast = TRUE) )
library(tidyverse)
meow3 %>% mutate(dupes = duplicated(meow3) | duplicated(meow3, fromLast = TRUE) )
meowest <- meow3 %>% mutate(dupes = duplicated(meow3) | duplicated(meow3, fromLast = TRUE) )
shinylive::export(".","site")
httpuv::runStaticServer()
shiny::runApp()
httpuv::runStaticServer(port=1001)
shinylive::export(".","site")
httpuv::runStaticServer(port=44657
httpuv::runStaticServer(port=44657a
httpuv::runStaticServer(port=4457)
httpuv::runStaticServer("site",port=4167)
httpuv::runStaticServer("site",port=4162)
runApp()
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyA
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyA
}
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
a
me''
## Only run this example in interactive R sessions
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
if (interactive()) {
# Define UI
ui <- fluidPage(
actionButton("rmv", "Remove UI"),
textInput("txt", "This is no longer useful")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$rmv, {
removeUI(
selector = "div:has(> #txt)"
)
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
?mutate
shinylive::export(".","site")
